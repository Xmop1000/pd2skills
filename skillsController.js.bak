app.controller(
	'skillsController',
	[
		'$scope',
		'HashStorage',

function($scope, HashStorage) {
	
	// ================================================================
	// = 技能狀態更新相關
	// ================================================================
	
	/**
	 * 更新技能解鎖狀態
	 */
	function updateSkillUnlockStatus(skill, tier) {
		// 剩餘技能點
		var leftPoint = $scope.totalPoint - $scope.usedPoint;
		
		// 判斷前置技能是否解鎖
		if (skill.require !== false) {
			skill.unlockRequire = (skill.require.skill.ownBasic === true)
		} else {
			skill.unlockRequire = true;
		}
		
		// 判斷階層是否解鎖
		if (tier.unlockStatus === true && skill.unlockRequire === true) {
			skill.unlockBasic = (leftPoint >= tier.skillUnlockPointBasic || skill.ownBasic);
			skill.unlockAce   = (tier.skillUnlockPointAce > 0)
				? (skill.ownBasic)
					? (leftPoint >= tier.skillUnlockPointAce || skill.ownAce)
					: (leftPoint >= tier.skillUnlockPointBasic + tier.skillUnlockPointAce)
				: false;
		} else {
			skill.unlockBasic = false;
			skill.unlockAce   = false;
		}
	}
	
	/**
	 * 更新技能擁有狀態
	 */
	function updateSkillOwnStatus(skill) {
		if (skill.unlockBasic !== true) skill.ownBasic = false;
		if (skill.unlockAce   !== true) skill.ownAce   = false;
	}
	
	/**
	 * 更新技能狀態
	 */
	function updateSkillStatus(skill, tier) {
		updateSkillUnlockStatus(skill, tier);
		updateSkillOwnStatus(skill);
	}
	
	/**
	 * 解鎖技能
	 */
	function unlockSkill(skill) {
		
		if (skill.ownBasic !== true) {
			
			if (skill.unlockBasic) skill.ownBasic = true;
			
		} else if (skill.ownAce !== true) {
			
			if (skill.unlockAce) skill.ownAce = true;
			
		}
		
	}
	
	/**
	 * 重設技能
	 */
	function unsetSkill(skill) {
		skill.ownBasic = false;
		skill.ownAce   = false;
	}
	
	
	// ================================================================
	// = 計算技能點
	// ================================================================
	
	/**
	 * 更新技能樹消耗技能點
	 */
	function updateTreeUsedPoint(tree) {
		
		var usedPoint = 0;
		
		// 迴圈技能樹階層
		tree.tiers.forEach(function(tier) {
			
			// 更新解鎖狀態
			tier.unlockRequire = tier.tierUnlockPoint - usedPoint;
			tier.unlockStatus = (tier.unlockRequire <= 0);
			
			if (tier.unlockStatus === true) {
				// 計算該階層消耗技能點
				tier.skills.forEach(function(skill) {
					if (skill.ownBasic === true) usedPoint += tier.skillUnlockPointBasic;
					if (skill.ownAce === true) usedPoint += tier.skillUnlockPointAce;
				});
			}
		});
		
		return tree.used = usedPoint;
	}
	
	/**
	 * 計算所有技能樹消耗總技能點
	 */
	function getTotalUsedPoint(trees) {
		var usedPoint = 0;
		
		trees.forEach(function(tree) {
			usedPoint += tree.used;
		});
		
		return usedPoint;
	}
	
	/**
	 * 重設技能樹
	 */
	function unsetTree(tree) {
		unsetSkill(tree.tiers[0].skills[0]);
		updateTreeUsedPoint(tree);
	}
	
	/**
	 * 重設所有技能樹
	 */
	function unsetAllTrees(trees) {
		trees.forEach(function(tree) {
			unsetTree(tree);
		});
	}
	
	// ================================================================
	// = 技能相關事件
	// ================================================================
	
	$scope.skillHover = function(skill, tier) {
		
		skill.hover = true;
		if (skill.unlockRequire === false) skill.require.skill.alert = true;
		
		setDisplaySkill(skill, tier);
	};
	
	$scope.skillLeave = function(skill, tier) {
		
		skill.hover = false;
		if (skill.unlockRequire === false) skill.require.skill.alert = false;
		
	}
	
	$scope.skillClick = function(skill, tier, tree) {
		unlockSkill(skill);
		
		HashStorage.setTreeData(tree);
		HashStorage.updateUrl();
	}
	
	$scope.skillRemove = function(skill, tier, tree) {
		unsetSkill(skill);
	}
	
	$scope.skillUpdate = function(skill, tier, tree) {
		updateSkillStatus(skill, tier)
		
		return getSkillStatusText(skill, tier);
	}

	
	// ================================================================
	// = Icon
	// ================================================================
	
	/**
	 * 取得技能圖示樣式
	 */
	function getSkillIconStyle(skillIndex, tierIndex, treeIndex) {
		var x = 11;
		var y = 41;
		
		var skillMargin = 64 + 9;
		var tierMargin = 64 + 7;
		var treeMargin = skillMargin * 3 + 7;
		
		if (tierIndex == 6) {
			skillIndex += 1;
		}
		
		x = 0 - (x + treeMargin * treeIndex + skillMargin * skillIndex);
		y = 0 - (y + tierMargin * tierIndex);
		
		return {'backgroundPosition': x +"px "+ y +"px"};
	}
	
	$scope.skillStyle = function(skillIndex, tierIndex, treeIndex) {
		return getSkillIconStyle(skillIndex, tierIndex, treeIndex);
	}
	
	
	// ================================================================
	// = 顯示相關
	// ================================================================
	
	// 初始
	$scope.display = {};
	
	// 設定顯示
	function setDisplaySkill(skill, tier) {
		$scope.display.skill = skill;
		$scope.display.tier  = tier;
	}
	
	// 清除顯示
	function clearDisplaySkill() {
		$scope.display.skill = false;
		$scope.display.tier  = false;
	}
	
	
	
	// 設定顯示
	function setDisplayTree(tree) {
		$scope.display.tree = tree;
	}
	
	// 清除顯示
	function clearDisplaySkill() {
		$scope.display.tree = false;
	}
	
	
	// ================================================================
	// = Tabs
	// ================================================================
	
	$scope.clickTab = function() {
		clearDisplaySkill();
	}
	
	// ================================================================
	// = 顯示技能相關
	// ================================================================
	$scope.totalPoint = 120;
	$scope.usedPoint = 0;
	
	$scope.updateTreeStatus = function(tree) {
		updateTreeUsedPoint(tree);
		return tree.used;
	}
	
	$scope.getUsed = function(trees) {
		
		
		$scope.usedPoint = getTotalUsedPoint(trees);
		return $scope.totalPoint - $scope.usedPoint;
	}
	
	$scope.resetTree = function(tree) {
		unsetTree(tree);
		HashStorage.updateTreeData(tree);
		HashStorage.updateUrl();
	}
	
	$scope.resetAll = function(trees) {
		unsetAllTrees(trees);
		HashStorage.unsetData();
		HashStorage.updateUrl();
	}
	
	
	// ================================================================
	// = Progress Bar
	// ================================================================
	
	function getProgressPercent(tree) {
		
		for (var i = 1; i < tree.tiers.length; i++) {
			var tier = tree.tiers[i];
			
			if (tier.unlockStatus == false) {
				if (i == 1) return 0;
				var basic = tree.tiers[i - 1].tierUnlockPoint;
				
				var range = tier.tierUnlockPoint - basic;
				var tierUsed = tree.used - basic;
				var tierProgress = Math.floor(tierUsed / range * 100 * 0.2);
				var progress = (i - 2) * 20;
				
				return progress + tierProgress;
			}
		}
		
		return 100;
	}
	
	$scope.getProgressBarStyle = function(tree) {
		return {height : getProgressPercent(tree) + '%'};
	}

}]);